@using BearsDenGames.Models.Battleship
@using BearsDenGames.Models.ConnectFour
<ModalScreen>
    <Header>
        <h3>Create Game</h3>
    </Header>
    <Body>
    
    <MatTextField Style="width:100%" class="FullWidthInput"
                  OnInput="@(ui => { OnValueChange(ui.Value?.ToString() ?? string.Empty); })"
                  OnKeyPress="OnNameChange"
                  @bind-Value="@GameName" Label="Game Name"></MatTextField>
    @if (Disabled && GameName != "")
    {
        <p style="color:red">*This name is already in use!</p>
    }
    </Body>
    <Footer>
        <MatButton class="GlassButton" Disabled="@Disabled" OnClick="@OnCreateGame" Label="Create"></MatButton>
        <MatButton class="CancelGlassButton" OnClick="@(() => Cancelled.InvokeAsync())" Label="Cancel"></MatButton>
    </Footer>
</ModalScreen>

@inject BearsDenGameServer BearsDenGameServer
@inject NavigationManager NavManager

@code {

    [Parameter]
    public EventCallback Cancelled { get; set; }

    [Parameter]
    public IPlayer? Player { get; set; }
    [Parameter]
    public  GameTypes GameType { get; set; }

    private string _gameName = "";

    private string GameName
    {
        get => _gameName;
        set
        {
            _gameName = value;
            Validate();
        }
    }

    private bool Disabled { get; set; } = true;


    private void OnValueChange(string e)
    {
        GameName = e;
    }

    private void OnNameChange(KeyboardEventArgs e)
    {
        if (e.Code != "Enter" && e.Code != "NumpadEnter") return;
        if (!Disabled) OnCreateGame();
    }

    private void Validate()
    {
        Disabled = IsValid();
    }

    private bool IsValid()
    {
        if (GameName == "") return true;
        if (BearsDenGameServer.BattleshipServer.GetGame(GameName.Trim()) != null) return true;
        return false;
    }

    private void OnCreateGame()
    {
       if (Player== null ) {
           Cancelled.InvokeAsync();
           return;
       }
        
            switch (GameType)
            {
                case GameTypes.Battleship:
                    CreateBattleship(Player);
                    break;
                case GameTypes.ConnectFour:
                    CreateConnectFour(Player);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
    }

    private void CreateBattleship(IPlayer player)
    {
            BattleshipPlayer bsPlayer = new(player);
            player.CurrentGame = new(GameName, GameTypes.Battleship);
            var game = new BattleshipGame(GameName, bsPlayer, BearsDenGameServer.DefaultIdleTimout);

            BearsDenGameServer.BattleshipServer.AddGame(game);
            NavManager.NavigateTo("Battleship?Game=" + GameName);
    }
    private void CreateConnectFour(IPlayer player)
    {
        player.CurrentGame = new(GameName, GameTypes.ConnectFour);
        var game = new ConnectFourGame(GameName, player, BearsDenGameServer.DefaultIdleTimout);

        BearsDenGameServer.ConnectFourServer.AddGame(game);
        NavManager.NavigateTo("ConnectFour?Game=" + GameName);
    }
    } 