@page "/ConnectFour"
@using BearsDenGames.Pages.Games.ConnectFourComponents
@using BearsDenGames.Models.ConnectFour

<div class="BsPageMain">
    <div class="BsPage-GameTitle">
        <h3>ConnectFour - @Game?.GameName</h3>
    </div>
    <div class="BsPage-GameControls">
        <div class="BsPage-ControlGrid">
            @if (GameState == GameState.Setup)
            {
                <div class="BsPage-Ready">
                    <MatButton class="GlassButton" OnClick="@SetReady" Label="Ready" />
                </div>
            }
            @if (GameState == GameState.Complete)
            {
                @if (@WinState())
                {
                    <MatFAB Label="You Win!!!" Style="background-color: lawngreen; color: black; font-weight: bold;" />
                }
                else
                {
                    <MatFAB Label="Game Over" Style="background-color: gray; color: white" />
                }
                <MatButton class="GlassButton" OnClick="@NewGame" Label="New Game" />
            }
            <div class="BsPage-Leave">
                <MatButton class="GlassButton" OnClick="@LeaveGame" Label="Leave" />
            </div>
        </div>
        <ConnectFourBoard />
    </div>
</div>

@inject BearsDenGameServer BearsDenGameServer
@inject NavigationManager NavManager
@inject ProtectedSessionStorage ProtectedSessionStorage

@code {
  ConnectFourBoard? _BoardRef;

    private ConnectFourGame? Game { get; set; }
    private BdgPlayer? C4Player { get; set; }
    private BdgPlayer? Opponent { get; set; }
    private GameState GameState { get; set; } = GameState.Setup;

    [CascadingParameter(Name = "Player")]
    private IPlayer? Player { get; set; }

    private void SetReady()
    {
       
        GameState = GameState.Ready;
    }
    private static bool WinState()
    {
        return false;
    }
    private void NewGame()
    {
        Game?.NewGame();
    }

    private void Randomize()
    {
      
        StateHasChanged();
    }

    private void LeaveGame()
    {
        if (C4Player != null)
        {
            Game?.RemovePlayer(C4Player);
            C4Player.CurrentGame = null;
        }
        Dispose();
        ReturnToIndex();
    }

    private void ReturnToIndex()
    {
        NavManager.NavigateTo("/");
    }

    private async void PlayerRefresh()
    {
       // Opponent = Game?.Players.ToList().Find(x => x.PlayerName != Player?.PlayerName);
       
        await InvokeAsync(StateHasChanged);
    }

    private async void Refresh(GameState gameState)
    {
        GameState = gameState;
       
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await ProtectedSessionStorage.GetAsync<string>("PlayerName");
        var playerName = result.Success ? result.Value : "";
        var player = BearsDenGameServer.PlayerServer.GetPlayer(playerName);
        if (player != null) Player = player;
        else ReturnToIndex();

        if (Player?.CurrentGame != null) Game = BearsDenGameServer.ConnectFourServer.GetGame(Player.CurrentGame.GameName);
        C4Player = (BdgPlayer)Game?.Players.ToList().Find(x => x.PlayerName == Player?.PlayerName)!;
        Opponent = (BdgPlayer)Game?.Players.ToList().Find(x => x.PlayerName != Player?.PlayerName)!;
        
        Game?.PlayerJoined();
        if (Game != null) Game.UpdateGameState += Refresh;
        if (Game != null) Game.UpdateGamePlayers += PlayerRefresh;
    }

    private void Dispose()
    {
        if (Game != null) Game.UpdateGameState -= Refresh;
    }

}